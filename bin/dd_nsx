#!/usr/bin/env python

import click
from nsx.client import NSXClient
import json
import requests
import time
import datetime
import os
from dimensiondata.dr.constants import (DIRECTORY,
                                        BACKUP_DIRECTORY,
                                        CURRENT_DIRECTORY)
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from requests import HTTPError

from os import listdir
from os.path import isfile, join

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


class NSXCLIClient(object):
    def __init__(self):
        self.verbose = False

    def init_client(self, configfile):
        config = configparser.ConfigParser()
        config.readfp(configfile)
        datacenters = config.sections()
        self.client = {}
        for datacenter in datacenters:
            user = config.get(datacenter, 'user')
            password = config.get(datacenter, 'password')
            endpoint = config.get(datacenter, 'endpoint')
            self.client[datacenter] = NSXClient(user, password, endpoint=endpoint)


pass_client = click.make_pass_decorator(NSXCLIClient, ensure=True)


@click.group()
@click.option('--verbose', default=False)
@click.option('--configFile', type=click.File('rb'), default='./nsx_config',
              help='The config file to use for credentials/endpoints')
@pass_client
def nsx(nsx, verbose, configfile):
    nsx.init_client(configfile)
    nsx.verbose = verbose


@nsx.command()
@click.option('--cron', is_flag=True, default=False, help='Use this flag is running via cron')
@click.option('--outFile', help='The nsx dump file')
@click.option('--datacenter', required=True, help='The datacenter to dump the config for')
@pass_client
def dump_config(nsx, cron, outfile, datacenter):
    if not outfile and not cron:
        click.secho("One of --cron or --outFile must be present", fg='red', bold=True)
        exit(1)
    dc_security_groups = {}
    dc_security_groups[datacenter] = nsx.client[datacenter].list_security_groups()
    current_time = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d-%H:%M')
    dc_security_groups['snapshot_time'] = current_time

    if cron:
        outfile = os.path.join(DIRECTORY, CURRENT_DIRECTORY, "LATEST-{0}".format(datacenter))
        if os.path.isfile(outfile):
            with open(outfile) as movefile:
                data = json.load(movefile)
            file_timestamp = data['snapshot_time']
            os.rename(outfile, os.path.join(DIRECTORY,
                                            BACKUP_DIRECTORY,
                                            "NSX_BACKUP_{0}_{1}".format(datacenter, file_timestamp)))
    with open(outfile, 'w+') as nsx_dump:
        nsx_dump.write(json.dumps(dc_security_groups, sort_keys=True, indent=4, separators=(',', ': ')))


@nsx.command()
@click.option('--latest', default=False, is_flag=True)
@click.option('--go', help='By default this is a dry run, these will actually do the puts', default=False, is_flag=True)
@click.option('--nsxDumpFile', help="The nsx dump file to use")
@click.option('--datacenter', required=True, help='The datacenter to apply the config for')
@pass_client
def apply_nsx_config(nsx, latest, go, nsxdumpfile, datacenter):
    if not latest and not nsxdumpfile:
        click.secho("One of --latest or --nsxDumpFile must be present", fg='red', bold=True)
        exit(1)

    current_security_groups = nsx.client[datacenter].list_security_groups()

    if latest:
        mypath = os.path.join(DIRECTORY, BACKUP_DIRECTORY)
        nsx_files = [os.path.join(mypath, f)
                     for f in listdir(mypath)
                     if isfile(join(mypath, f)) and datacenter in f]
        nsx_files = sorted(nsx_files, reverse=True)
    else:
        nsx_files = [nsxdumpfile]

    changed = False
    for nsx_file in nsx_files:
        with open(nsx_file) as f:
            dc_security_groups = json.load(f)

            if datacenter not in dc_security_groups:
                click.secho("No dump found for datacenter {0} in file {1}".format(
                    datacenter, nsx_file), fg='red', bold=True)
                continue

            security_groups = dc_security_groups[datacenter]

            print("Checking differences in file {0}".format(nsx_file))
            differences = compare_security_groups(security_groups, current_security_groups)

            if differences:
                click.secho("Found differences in {0}".format(nsx_file))
                for security_group in security_groups:
                    click.secho("Security group {0}".format(security_group['objectId']))
                    if 'member' not in security_group:
                        click.secho("Security group has no members skipping...")
                        continue
                    if isinstance(security_group['member'], dict):
                        add_member(nsx.client[datacenter],
                                   security_group['objectId'],
                                   security_group['member']['objectId'],
                                   go)
                    else:
                        for member in security_group['member']:
                            add_member(nsx.client[datacenter], security_group['objectId'], member['objectId'], go)
                changed = True
                break

    if changed:
        click.secho("Security Groups Applied", fg='green', bold=True)
    else:
        click.secho("No security groups changed", fg='red', bold=True)


def compare_security_groups(sg1, sg2):
    for security_group in sg1:
        if 'member' not in security_group:
            continue
        # Now check the other group
        found = False
        for comp_security_group in sg2:
            if security_group['objectId'] == comp_security_group['objectId']:
                if isinstance(security_group['member'], dict):
                    if not isinstance(comp_security_group['member'], dict):
                        break
                    if security_group['member']['objectId'] == comp_security_group['member']['objectId']:
                        found = True
                        break
                    else:
                        click.secho("Did not find member {0}".format(security_group['member']['objectId']))
                        break
                if isinstance(security_group['member'], list):
                    if not isinstance(comp_security_group['member'], list):
                        break
                    member_ids = [x['objectId'] for x in security_group['member']]
                    comp_member_ids = [x['objectId'] for x in comp_security_group['member']]
                    member_ids = sorted(member_ids)
                    comp_member_ids = sorted(comp_member_ids)
                    if comp_member_ids == member_ids:
                        found = True
                        break
                    else:
                        click.secho("Member list for {0} {1} does not match {2}".format(
                            security_group['objectId'], member_ids, comp_member_ids)
                        )
                        break
                break
        if found is False:
            click.secho("Differences found in security group {0}".format(security_group['objectId']))
            return True
    return False


def add_member(client, group, member, go):
    if not go:
        click.secho("Would have made call for {0} and {1}".format(group, member), fg='green')
    else:
        try:
            client.add_member_to_security_group(group, member)
            click.secho("Successfully added: Group {0} Member {1}".format(group, member), fg='green')
        except HTTPError:
            click.secho("Skipping Group {0} Member {1} as it already exists".format(group, member))
            pass


if __name__ == '__main__':
    nsx()
